{"ast":null,"code":"import React,{createContext}from\"react\";import{QueryClient,QueryClientProvider,useQuery}from\"@tanstack/react-query\";import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";export const ProductsContext=/*#__PURE__*/createContext({});const queryClient=new QueryClient();async function GetProducts(){const response=await fetch(\"https://mks-frontend-challenge-04811e8151e6.herokuapp.com/api/v1/products?page=1&rows=8&sortBy=id&orderBy=ASC\");if(!response.ok)throw new Error(\"Os dados não foam carregados\");// var result;        \n// await response.json().then(res => {result = res.products})\n// console.log(\"passou a response\")\n// console.log(result);\nreturn response.json();}const ProductsProvider=_ref=>{let{children}=_ref;const{data,isLoading,isError}=useQuery({queryKey:[\"products\"],queryFn:()=>GetProducts()},queryClient);return/*#__PURE__*/_jsx(QueryClientProvider,{client:queryClient,children:/*#__PURE__*/_jsxs(ProductsContext.Provider,{value:{data,isLoading,isError},children:[console.log(data),children]})});};export default ProductsProvider;","map":{"version":3,"names":["React","createContext","QueryClient","QueryClientProvider","useQuery","jsxs","_jsxs","jsx","_jsx","ProductsContext","queryClient","GetProducts","response","fetch","ok","Error","json","ProductsProvider","_ref","children","data","isLoading","isError","queryKey","queryFn","client","Provider","value","console","log"],"sources":["C:/Users/Danie/MiniStore/ministore/src/contexts/products.tsx"],"sourcesContent":["import React, {createContext, useState, useEffect} from \"react\";\r\nimport { QueryClient, QueryClientProvider, useQuery } from \"@tanstack/react-query\";\r\nimport { error } from \"console\";\r\n\r\n\r\nexport const ProductsContext = createContext({})\r\n\r\nconst queryClient = new QueryClient()\r\n\r\nasync function GetProducts (){\r\n    const response = await fetch(\"https://mks-frontend-challenge-04811e8151e6.herokuapp.com/api/v1/products?page=1&rows=8&sortBy=id&orderBy=ASC\")\r\n    if (!response.ok)\r\n        throw new Error(\"Os dados não foam carregados\")\r\n    \r\n    // var result;        \r\n    // await response.json().then(res => {result = res.products})\r\n    // console.log(\"passou a response\")\r\n    // console.log(result);\r\n\r\n    return response.json()\r\n}\r\n\r\nconst ProductsProvider = ({children}:any) =>{\r\n\r\n    const {data, isLoading, isError } = useQuery({queryKey:[\"products\"], queryFn:()=>GetProducts()}, queryClient)\r\n    return(\r\n        <QueryClientProvider client={queryClient}>\r\n            <ProductsContext.Provider value={{data, isLoading, isError}}>\r\n                {console.log(data)}\r\n                {children}\r\n            </ProductsContext.Provider>\r\n        </QueryClientProvider>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default ProductsProvider;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAGC,aAAa,KAA4B,OAAO,CAC/D,OAASC,WAAW,CAAEC,mBAAmB,CAAEC,QAAQ,KAAQ,uBAAuB,CAAC,OAAAC,IAAA,IAAAC,KAAA,CAAAC,GAAA,IAAAC,IAAA,yBAInF,MAAO,MAAM,CAAAC,eAAe,cAAGR,aAAa,CAAC,CAAC,CAAC,CAAC,CAEhD,KAAM,CAAAS,WAAW,CAAG,GAAI,CAAAR,WAAW,CAAC,CAAC,CAErC,cAAe,CAAAS,WAAWA,CAAA,CAAG,CACzB,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,+GAA+G,CAAC,CAC7I,GAAI,CAACD,QAAQ,CAACE,EAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,8BAA8B,CAAC,CAEnD;AACA;AACA;AACA;AAEA,MAAO,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAC1B,CAEA,KAAM,CAAAC,gBAAgB,CAAGC,IAAA,EAAmB,IAAlB,CAACC,QAAY,CAAC,CAAAD,IAAA,CAEpC,KAAM,CAACE,IAAI,CAAEC,SAAS,CAAEC,OAAQ,CAAC,CAAGlB,QAAQ,CAAC,CAACmB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAEC,OAAO,CAACA,CAAA,GAAIb,WAAW,CAAC,CAAC,CAAC,CAAED,WAAW,CAAC,CAC7G,mBACIF,IAAA,CAACL,mBAAmB,EAACsB,MAAM,CAAEf,WAAY,CAAAS,QAAA,cACrCb,KAAA,CAACG,eAAe,CAACiB,QAAQ,EAACC,KAAK,CAAE,CAACP,IAAI,CAAEC,SAAS,CAAEC,OAAO,CAAE,CAAAH,QAAA,EACvDS,OAAO,CAACC,GAAG,CAACT,IAAI,CAAC,CACjBD,QAAQ,EACa,CAAC,CACV,CAAC,CAE9B,CAAC,CAKD,cAAe,CAAAF,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}